---
title: Preparing GCP Before Deploying PKS
owner: Ops Manager
---

<strong><%= modified_date %></strong>

This topic describes the preparation steps required to install Pivotal Container Service (PKS) on Google Cloud Platform (GCP).

In addition to fulfilling the prerequisites listed in the [GCP Prerequisites and Resource Requirements](gcp-requirements.html) topic,
you must create resources in GCP such as a new network, firewall rules, load balancers, and a service account before deploying PKS.
Follow these procedures to prepare your GCP environment.

## <a id='gcp-api'></a>Step 1: Enable Google Cloud APIs

Ops Manager manages GCP resources using the Google Compute Engine and Cloud Resource Manager APIs.
To enable these APIs, perform the following steps:

1. Log in to the Google Developers console at [https://console.developers.google.com](https://console.developers.google.com).
1. In the console, navigate to the GCP project where you want to install PKS. 
1. Select **Enable APIs & Services** to access the API Library.
1. In the search field, enter `Compute Engine API` and press **Enter**.
1. On the **Google Compute Engine API** page, click **Enable**.
1. In the search field, enter `Cloud Resource Manager API` and press **Enter**. 
1. On the **Google Cloud Resource Manager API** page, click **Enable**.
1. To verify that the APIs have been enabled, perform the following steps:
    1. Log in to GCP:
    <pre class="terminal">
    $ gcloud auth login
    </pre>
    1. List your projects:
    <pre class="terminal">
    $ gcloud projects list
    PROJECT\_ID       NAME                 PROJECT\_NUMBER
    my-project-id    my-project-name      ##############
    </pre>
    This command lists the projects where you enabled Google Cloud APIs.

## <a id='service-account'></a>Step 2: Create Service Accounts

In order for Kubernetes to create load balancers and attach persistent disks to pods, you must create service accounts with sufficient permissions.

You need separate service accounts for Kubernetes cluster master and worker node VMs, and a third account for BOSH and Ops Manager.
<%= vars.vm_credentials %>

### <a id='create-master'></a>Create the Master Node Service Account

1. From the GCP Console, select **IAM & admin > Service accounts**.
1. Click **Create Service Account**.
1. Enter a name for the service account, and add the following roles:
  * **Compute Engine**
      * **Compute Instance Admin (v1)**
      * **Compute Network Admin**
      * **Compute Security Admin**
      * **Compute Storage Admin**
      * **Compute Viewer**
  * **Service Accounts**
      * **Service Account User**
1. Click **Save**.

### <a id='create-worker'></a>Create the Worker Node Service Account

1. From the GCP Console, select **IAM & admin > Service accounts**.
1. Click **Create Service Account**.
1. Enter a name for the service account, and add the **Compute Engine > Compute Viewer** role.
1. Click **Save**.

### <a id='create-bosh-ops-man'></a> Create the BOSH/Ops Manager Service Account

1. From the GCP Console, select **IAM & admin > Service accounts**.
1. Click **Create Service Account**.
1. Enter a name for the service account, and add the following roles:
  * **Service Accounts**
      * **Service Account User**
      * **Service Account Token Creator**
  * **Compute Engine**
      * **Compute Instance Admin (v1)**
      * **Compute Network Admin**
      * **Compute Storage Admin**
  * **Storage**
      * **Storage Admin**
1. Select **Furnish a new private key** and select **JSON**.
1. Click **Save**.
Your browser automatically downloads a JSON file with a private key for this account.
Save this file in a secure location.

<p class="note"><strong>Note</strong>: Pivotal recommends confirming the permissions of your Master Node Service Account, Worker Node Service Account, and BOSH/Ops Manager Service Account after you create them. To verify these account permissions, run the <code>gcloud auth list</code> command. For more information, see <a href= "https://cloud.google.com/sdk/gcloud/reference/auth/">gcloud auth</a> in the Google Cloud documentation.
</p>

## <a id='create-network'></a>Step 3: Create a GCP Network with Subnets

You must provide infrastructure subnets for Ops Manager, the BOSH Director, and 
NAT instances. These subnets may already exist in environments with an existing 
Ops Manager deployment.

If these infrastructure subnest do not exist in your environment, follow the steps below to create them.

1. Log in to the [GCP Console](https://console.cloud.google.com/).
 
1. Navigate to the GCP project where you want to install PKS.
1. Select **VPC network**, then **CREATE VPC NETWORK**.
1. In the **Name** field, enter `your-pks-virt-net`.
`your-pks` is a lower-case prefix to help you identify resources for this PKS deployment in the GCP console. Network names must be lower-case. Use the values from the following tables as a guide when you create each network, replacing the IP addresses with ranges that are available in your GCP environment.
<p class="note"><strong>Note</strong>: Pivotal recommends using all three networks in production environments.
You can combine <code>pks-infrastructure</code> and <code>pks-main</code> into a single network in non-production environments.
<code>pks-services</code> always requires its own network.</p>
  1. Under **Subnets**, complete the form as follows to create an infrastructure subnet for Ops Manager, the BOSH Director, and NAT instances:
      <table>
        <tr>
          <th style="width:25%">Name</th>
          <td><code>MY-PKS-subnet-infrastructure-GCP-REGION</code></td>
        </tr>
        <tr>
          <th>Region</th>
          <td>A region that supports three availability zones (AZs).
          For help selecting the correct region for your deployment, see [Regions and Zones](https://cloud.google.com/compute/docs/regions-zones/regions-zones) in the Google documentation.</td>
        </tr>
        <tr>
        <th>IP address range</th>
        <td>A CIDR ending in `/26`<br>
            Example: `192.168.101.0/26`</td>
        </tr>
      </table><br>
    1. Click **Add subnet** to add a second subnet for the PKS control plane with the following details:
      <table>
        <tr>
          <th style="width:25%">Name</th>
          <td><code>MY-PKS-subnet-pks-GCP-REGION</code></td>
        </tr>
        <tr>
          <th>Region</th>
          <td>The same region you selected for the infrastructure subnet</td>
        </tr>
        <tr>
        <th>IP address range</th>
        <td>A CIDR ending in `/26`<br>
            Example: `192.168.16.0/26`</td>
        </tr>
      </table><br>
    1. Click **Add subnet** to add a third subnet for the Kubernetes clusters with the following details:
      <table>
        <tr>
          <th style="width:25%">Name</th>
          <td><code>MY-PKS-subnet-services-GCP-REGION</code></td>
        </tr>
        <tr>
          <th>Region</th>
          <td>The same region you selected for the previous subnets</td>
        </tr>
        <tr>
        <th>IP address range</th>
        <td>A CIDR in `/22`<br>
            Example: `192.168.20.0/22`</td>
        </tr>
      </table><br>

1. Under **Dynamic routing mode**, leave **Regional** selected.

1. Click **Create**.

## <a id='create-nat'></a>Step 4: Create NAT Instances

Use NAT instances when you want to expose only a minimal number of public IP addresses. 

Creating NAT instances permits Internet access from cluster VMs.
You might, for example, need this Internet access for pulling Docker images or enabling Internet access for your workloads.

1. In the console, navigate to **Compute Engine** > **VM instances**. 
1. Click **CREATE INSTANCE**. 
1. Complete the following fields:
  * **Name**: Enter `MY-PKS-nat-gateway-pri`.
  This is the first, or primary, of three NAT instances you need.
  If you are using a single AZ, you need only one NAT instance.
  * **Zone**: Select the first zone from your region.
  Example: For region `us-west1`, select zone `us-west1-a`.
  * **Machine type**: Select `n1-standard-4`.
  * **Boot disk**: Click **Change** and select `Ubuntu 14.04 LTS`. 

1. Expand the additional configuration fields by clicking **Management, disks, networking, SSH keys**.   
  1. In the **Startup script** field under **Automation**, enter the following text: 
      <code>#! /bin/bash<br>
      sudo sh -c 'echo 1 > /proc/sys/net/ipv4/ip_forward'<br>
      sudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE</code>

1. Click **Networking** to open additional network configuration fields:
    1. In the **Network tags** field, add the following: `nat-traverse` and `MY-PKS-nat-instance`. 
    1. Click the pencil icon to edit the **Network interface**. 
    1. For **Network**, select `your-pks-virt-net`. You created this network in [Step 3: Create a GCP Network with Subnets](#create-network).
    1. For **Subnetwork**, select `MY-PKS-subnet-infrastructure-GCP-REGION`.
    1. For **Primary internal IP**, select `Ephemeral (Custom)`.
    1. Enter an IP address in the **Custom ephemeral IP address** field. Example: `192.168.101.2`. The IP address must meet the following requirements: 
      - The IP address must exist in the CIDR range you set for the `MY-PKS-subnet-infrastructure-GCP-REGION` subnet. 
      - The IP address must exist in a reserved IP range set later in Ops Manager Director. The reserved range is typically the first `.1` through `.9` addresses in the CIDR range you set for the `MY-PKS-subnet-infrastructure-GCP-REGION` subnet. 
      - The IP address cannot be the same as the Gateway IP address set later in Ops Manager. The Gateway IP address is typically the first `.1` address in the CIDR range you set for the `MY-PKS-subnet-infrastructure-GCP-REGION` subnet. 
    1. For **External IP**, select `Ephemeral`.
    1. Set **IP forwarding** to `On`. 
    1. Click **Done**.

1. Click **Create** to finish creating the NAT instance.

1. To create additional NAT instances, repeat steps 2-6 using the names and zones specified in the table below.
  <table>
    <tr>
      <th rowspan="3" width="15%">Instance 2</th>
      <td width="15%"><strong>Name</strong></td>
      <td>
        <code>MY-PKS-nat-gateway-sec</code>
      </td>
    </tr>
    <tr>
    	<td><strong>Zone</strong></td>
      <td>
        Select the second zone from your region.<br>
        Example: For region <code>us-west1</code>, select zone <code>us-west1-b</code>.<br>
      </td>
    </tr>
    <tr>
      <td><strong>Internal IP</strong></td>
      <td>
        Select <code>Custom</code> and enter an IP address in the <strong>Internal IP address</strong> field. Example: `192.168.101.3`.
<br><br>As described above, this address must in the CIDR range you set for the <code>MY-PKS-subnet-infrastructure-GCP-REGION</code> subnet, must exist in a reserved IP range set later in Ops Manager Director, and cannot be the same as the Gateway IP address set later in Ops Manager. 
      </td>
    </tr>
    <tr>
      <th rowspan="3">Instance 3</th>
      <td><strong>Name</strong></td>
      <td>
        <code>MY-PKS-nat-gateway-ter</code>
      </td>
    </tr>
    <tr>
      <td><strong>Zone</strong></td>
      <td>
        Select the third zone from your region.<br>
        Example: For region <code>us-west1</code>, select zone <code>us-west1-c</code>.
      </td>
    </tr>
    <tr>
      <td><strong>Internal IP</strong></td>
      <td>
        Select <code>Custom</code> and enter an IP address in the <strong>Internal IP address</strong> field. Example: `192.168.101.4`.
<br><br>As described above, this address must in the CIDR range you set for the <code>MY-PKS-subnet-infrastructure-GCP-REGION</code> subnet, must exist in a reserved IP range set later in Ops Manager Director, and cannot be the same as the Gateway IP address set later in Ops Manager. 
      </td>
    </tr>
  </table>

### <a id='nat-routes'></a>Create Routes for NAT Instances

1. In the GCP console, navigate to **VPC Networks** > **Routes**. 

1. Click **CREATE ROUTE**. 

1. Complete the form as follows:
  * **Name**: `MY-PKS-nat-pri`
  * **Network**: `your-pks-virt-net`
  * **Destination IP range**: `0.0.0.0/0`
  * **Priority**: `800`
  * **Instance tags**: `MY-PKS`
  * **Next hop**: `Specify an instance`
  * **Next hop instance**: `MY-PKS-nat-gateway-pri`

1. Click **Create** to finish creating the route. 

1. Repeat steps 2-4 to create two additional routes with the names and next hop instances specified in the table below.
The rest of the configuration remains the same. 
  <table>
    <tr>
      <th>Route 2</th>
      <td>
        <strong>Name</strong>: <code>MY-PKS-nat-sec</code><br>
        <strong>Next hop instance</strong>: <code>MY-PKS-nat-gateway-sec</code>
      </td>
    </tr>
    <tr>
      <th>Route 3</th>
      <td>
        <strong>Name</strong>: <code>MY-PKS-nat-ter</code><br>
        <strong>Next hop instance</strong>: <code>MY-PKS-nat-gateway-ter</code>
      </td>
    </tr>
    </table>

## <a id='firewall-rules'></a>Step 5: Create Firewall Rules for the Network

GCP lets you assign [tags](https://cloud.google.com/compute/docs/label-or-tag-resources#tags) to virtual machine (VM) instances and create firewall rules that apply to VMs based on their tags. This step assigns tags and firewall rules to Ops Manager components and VMs that handle incoming traffic. 

1. From the GCP console, navigate to **VPC network > Firewall rules**.

1. Create firewall rules according to the table below:
  <p class="note"><strong>Note</strong>: If you want your firewalls rules to only allow traffic within your private network, modify the <strong>Source IP Ranges</strong> from the table accordingly.</p>
  <table>
  <tr><th colspan="2" style="text-align: center;">Firewall Rules</th></tr>
   <tr>
    <tr>
      <th>Rule 1</th>
      <td>
        This rule allows SSH from public networks.<br><br>
        <strong>Name</strong>: <code>MY-PKS-allow-ssh</code><br>
        <strong>Network</strong>: <code>your-pks-virt-net</code><br>
        <strong>Allowed protocols and ports</strong>: <code>tcp:22</code><br>
        <strong>Source filter</strong>: IP ranges<br>
        <strong>Source IP ranges</strong>: <code>0.0.0.0/0</code><br>
        <strong>Target tags</strong>: <code>allow-ssh</code>
      </td>
    </tr>
    <tr>
      <th>Rule 2</th>
      <td>
        This rule allows HTTP from public networks.<br><br>
        <strong>Name</strong>: <code>MY-PKS-allow-http</code><br>
        <strong>Network</strong>: <code>your-pks-virt-net</code><br>
        <strong>Allowed protocols and ports</strong>: <code>tcp:80</code><br>
        <strong>Source filter</strong>: IP ranges<br>
        <strong>Source IP ranges</strong>: <code>0.0.0.0/0</code><br>
        <strong>Target tags</strong>: <code>allow-http</code>, <code>router</code>
      </td>
    </tr>
    <tr>
      <th>Rule 3</th>
      <td>
        This rule allows HTTPS from public networks.<br><br>
        <strong>Name</strong>: <code>MY-PKS-allow-https</code><br>
        <strong>Network</strong>: <code>your-pks-virt-net</code><br>
        <strong>Allowed protocols and ports</strong>: <code>tcp:443</code><br>
        <strong>Source filter</strong>: IP ranges<br>
        <strong>Source IP ranges</strong>: <code>0.0.0.0/0</code><br>
        <strong>Target tags</strong>: <code>allow-https</code>, <code>router</code>
      </td>
    </tr>
    <tr>
      <th>Rule 4</th>
      <td>
        This rule allows communication between BOSH-deployed jobs.<br><br>
        <strong>Name</strong>: <code>MY-PKS-allow-pks-all</code><br>
        <strong>Network</strong>: <code>your-pks-virt-net</code><br>
        <strong>Allowed protocols and ports</strong>: <code>tcp;udp;icmp</code><br>
        <strong>Source filter</strong>: Source tags<br>
        <strong>Target tags</strong>: <code>MY-PKS</code>, <code>MY-PKS-opsman</code>, <code>nat-traverse</code><br>
        <strong>Source tags</strong>: <code>MY-PKS</code>, <code>MY-PKS-opsman</code>, <code>nat-traverse</code>
      </td>
    </tr>
  </table>
1. If you are only using your GCP project to deploy PKS, then you can delete the following default firewall rules:
   * `default-allow-http`
   * `default-allow-https`
   * `default-allow-icmp`
   * `default-allow-internal`
   * `default-allow-rdp`
   * `default-allow-ssh`

## <a id='next-steps'></a>Next Steps

To install PKS on GCP, follow the procedures in [Deploying Ops Manager on GCP](gcp-om-deploy.html).
